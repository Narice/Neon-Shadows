<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shadow_standing_Right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
image_speed = 0.08;
fric = 0.6;
fric_slide = 0.2;
grav = 0.6;
hsp = 0;
vsp = 0;
mvframecount = 0;
previousmv = 0;
sliding = 0;
    //max speeds
    maxvsp = 10;
    maxhsp = 5;
    maxcrouchhsp = 2.5;
//how much is added
jumpsp = 10;

//camera
view_zoom = 1;
view_max_zoom = 10;
view_xview = x - view_wview/2;
view_yview = y-72 - view_hview/2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT ----------------------------------------
//camera movement
camera_movement();

//Get the player's input
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("Q"));
key_jump = -keyboard_check_pressed(vk_space);
key_jump_held = keyboard_check(vk_space);
crouch = max(keyboard_check(vk_shift),keyboard_check(vk_control));
crouch_pressed = max(keyboard_check_pressed(vk_shift),keyboard_check_pressed(vk_control));

//React to input
    //Horizontal
    mv = key_left + key_right;
    mvsp = 1/sqrt(mvframecount+0.5);
    if (crouch) mvsp = mvsp * 0.5;
    if (!sliding) hsp += mv * mvsp;

        //sliding ?
        if (crouch &amp;&amp; abs(hsp) &gt;= maxhsp) sliding = 1;
        if (crouch &amp;&amp; abs(hsp) &lt;= maxcrouchhsp) sliding = 0;
        
        //frixion
        if (abs(hsp) &gt;= fric)
        {
            if ((mv == 0 || mv != sign(hsp)) &amp;&amp; !sliding)
            {
                hsp -= sign(hsp) * fric;
            }
        }
        if (mv == 0 &amp;&amp; abs(hsp) &lt; fric &amp;&amp; !sliding) hsp = 0;
        if (sliding) hsp -= fric_slide;
        
        //max speed
        if (abs(hsp) &gt; maxhsp)
        {
        hsp = sign(hsp) * maxhsp;
        }
        
        if (crouch &amp;&amp; !sliding &amp;&amp; abs(hsp) &gt; maxcrouchhsp)
        {
        hsp = sign(hsp) * maxcrouchhsp;
        }
        
    //Vertical
        //gravity
        if (vsp &lt; maxvsp) vsp += grav;
        
        //jump
        if (place_meeting(x,y+1,obj_wall))
        {
            vsp = key_jump * jumpsp;
        }
        if(vsp &lt; 0 &amp;&amp; !key_jump_held) vsp = max(vsp,-jumpsp/4);
        
//Collision system &amp;&amp; Final mvt
    //Horizontal Collision
    if (place_meeting(x+hsp,y,obj_wall))
    {
        while(!place_meeting(x+sign(hsp),y,obj_wall))
        {
            x += sign(hsp);
        }
        hsp = 0;
    }
    x += hsp
    
    //Vertical Collision
    if (place_meeting(x,y+vsp,obj_wall))
    {
        while(!place_meeting(x,y+sign(vsp),obj_wall))
        {
            y += sign(vsp);
        }
        vsp = 0;
    }
    y += vsp
    
//mvframecount calcul
if (mv != 0 &amp;&amp; mv == previousmv) mvframecount +=1;
else mvframecount = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SPRITE GESTION -----------------------------------
//Sprite direction
if(place_meeting(x, y+1,obj_wall))
{

    if (hsp == 0)
    {
        if (previousmv == -1) sprite_index = spr_shadow_standing_Left;
        if (previousmv == 1) sprite_index = spr_shadow_standing_Right;
    }

    if (previousmv != mv &amp;&amp; hsp != 0)
    {
        image_speed = hsp/maxhsp * 0.08;
        if (mv == 1) sprite_index = spr_shadow_moving_Right;  
        if (mv == -1) sprite_index = spr_shadow_moving_Left;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PREVIOUS MV = MV
previousmv = mv;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
